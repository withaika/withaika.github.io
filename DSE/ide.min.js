function DroidScriptApp(n) {
    this.folder = n;
    this.editorFiles = [];
    this.activeEditorFile = null;
    this.mainEditorFile = null;
    this.eventHandlers = {
        fileAdded: [],
        fileRemoved: [],
        fileRenamed: [],
        fileModified: []
    }
}
function DroidScriptAppFile(n) {
    this.filename = n;
    var t = n.split(".").slice(0, -1);
    this.displayName = t.join(".");
    this.functions = [];
    this.session = null;
    this.modified = !1;
    this.tabId = uniqueTabIdCounter++;
    this.errorMarkers = [];
    this.canDelete = !1
}
function AppService() {
    function r(n, t) {
        var r = t || window;
        i.appChanged.forEach(function(t) {
            t.call(r, n)
        })
    }
    var t = ""
      , n = {}
      , i = {
        appChanged: []
    };
    this.getOpenApp = function() {
        return t == "" ? null : n[t]
    }
    ;
    this.setOpenApp = function(n) {
        n == null && (t = "");
        t = n.getName();
        r(this.getOpenApp(), this)
    }
    ;
    this.getApp = function(t) {
        return n[t]
    }
    ;
    this.removeApp = function(t) {
        delete n[t]
    }
    ;
    this.addApp = function(t) {
        n[t.getName()] = t
    }
    ;
    this.clear = function() {
        n = {}
    }
    ;
    this.on = function(n, t) {
        i[n].push(t)
    }
    ;
    this.off = function(n, t) {
        i[n] = i[n].filter(function(n) {
            if (n !== t)
                return n
        })
    }
}
function Client(n, t, i, r, u, f) {
    this.appService = i;
    this.ternService = r;
    this.editor = n;
    this.sampleEditor = t;
    this.extImageLoader = u;
    this.assets = f;
    this.addEventListeners()
}
function ClientWeb(n, t, i, r, u, f, e) {
    Client.prototype.constructor.call(this, t, i, r, u, f, e);
    this.setConfig(n)
}
function Assets(n, t, i) {
    function o(n) {
        n.on("dragover", h);
        n.on("drop", v);
        n.on("dragenter", c);
        n.on("dragleave", l);
        n.on("dragend", a)
    }
    function s() {
        document.querySelector("#imgUploadBtn").addEventListener("click", function() {
            agent.indexOf("Android") > -1 ? (ChooseFile("Choose a file", "image/*", assets_onFileChoose),
            assets_chooseFileFolder = "Img") : $("input[id=imageUploadFile]").click()
        });
        document.querySelector("#sndUploadBtn").addEventListener("click", function() {
            agent.indexOf("Android") > -1 ? (ChooseFile("Choose a file", "audio/*", assets_onFileChoose),
            assets_chooseFileFolder = "Snd") : $("input[id=soundUploadFile]").click()
        });
        document.querySelector("#htmlUploadBtn").addEventListener("click", function() {
            agent.indexOf("Android") > -1 ? (ChooseFile("Choose a file", "text/*", assets_onFileChoose),
            assets_chooseFileFolder = "Html") : $("input[id=htmlUploadFile]").click()
        });
        document.querySelector("#miscUploadBtn").addEventListener("click", function() {
            agent.indexOf("Android") > -1 ? (ChooseFile("Choose a file", "*/*", assets_onFileChoose),
            assets_chooseFileFolder = "Misc") : $("input[id=miscUploadFile]").click()
        })
    }
    function e(n) {
        var r, f, e, o;
        typeof n == "undefined" && (n = "Img,Snd,Html,Misc");
        n.indexOf("Img") != -1 && (r = t.getOpenApp().folder + "/Img",
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=" + encodeURIComponent(r))
        }).then(function(n) {
            var t = sortList(JSON.parse(n).list);
            u(t, $("#imageAssetsList"), r, Resources.ASSET_IMG);
            $("#imageAssetsList").find("img").each(function(n) {
                i.load(NetUtils.getServerUrl(r + "/") + t[n], $(this), Resources.ASSET_IMG)
            })
        }));
        n.indexOf("Snd") != -1 && (f = t.getOpenApp().folder + "/Snd",
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=" + encodeURIComponent(f))
        }).then(function(n) {
            var t = sortList(JSON.parse(n).list);
            u(t, $("#soundAssetsList"), f, Resources.ASSET_SND)
        }));
        n.indexOf("Html") != -1 && (e = t.getOpenApp().folder + "/Html",
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=" + encodeURIComponent(e))
        }).then(function(n) {
            var t = sortList(JSON.parse(n).list);
            u(t, $("#htmlAssetsList"), e, Resources.ASSET_HTML)
        }));
        n.indexOf("Misc") != -1 && (o = t.getOpenApp().folder + "/Misc",
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=" + encodeURIComponent(o))
        }).then(function(n) {
            var t = sortList(JSON.parse(n).list);
            u(t, $("#miscAssetsList"), o, Resources.ASSET_MISC)
        }))
    }
    function u(n, t, i, r) {
        var u, e, f;
        for (t.empty(),
        u = 0; u < n.length; u++)
            n[u].indexOf(".nomedia") == -1 && (e = "",
            e += '<li>\n<div class="thumbnail">\n<div style="height: 64px; text-align: center; vertical-align: middle;">\n<img alt="" src="' + r + '" style="width: 64px; max-height: 64px"/>\n<\/div>\n<div class="caption">\n<div class="well thumbnailFilename">' + n[u] + '<\/div>\n<p class="thumbnailButtons">\n<a id="renameAssetButton" href="#" class="btn btn-mini btn-flat btn-noborder" data-toggle="tooltip" title="Rename">\n<i class="icon-edit"><\/i>\n<\/a>\n<a id="deleteAssetButton" href="#" class="btn btn-mini btn-flat btn-noborder" data-toggle="tooltip" title="Delete">\n<i class="icon-trash"><\/i>\n<\/a>\n<\/p>\n<\/div>\n<\/div>\n<\/li>\n',
            f = $(e),
            f.data("assetFile", n[u]),
            f.data("assetDir", i),
            t.append(f));
        updateTooltips()
    }
    function h(n) {
        n = n.originalEvent;
        n.stopPropagation && n.stopPropagation();
        n.preventDefault && n.preventDefault();
        n.dataTransfer.dropEffect = "copy"
    }
    function c(n) {
        n = n.originalEvent;
        r.push(n.target);
        var t = $(n.target).closest(".asset-drop-target");
        t !== null && t.addClass("drop-target-highlight")
    }
    function l(n) {
        if (n = n.originalEvent,
        r.pop(),
        r.length === 0) {
            var t = $(n.target).closest(".asset-drop-target");
            t !== null && t.removeClass("drop-target-highlight")
        }
    }
    function a(n) {
        n = n.originalEvent;
        r = [];
        var t = $(n.target).closest(".asset-drop-target");
        t !== null && t.removeClass("drop-target-highlight")
    }
    function v(n) {
        var i, u, o, f, s;
        if (n = n.originalEvent,
        n.stopPropagation && n.stopPropagation(),
        n.preventDefault && n.preventDefault(),
        r = [],
        i = $(n.target).closest(".asset-drop-target"),
        i !== null && i.removeClass("drop-target-highlight"),
        t.getOpenApp() != null)
            for (u = "",
            i.hasClass("img-asset-group") ? u = "/Img" : i.hasClass("snd-asset-group") ? u = "/Snd" : i.hasClass("html-asset-group") ? u = "/Html" : i.hasClass("misc-asset-group") && (u = "/Misc"),
            o = n.dataTransfer.files,
            f = 0; f < o.length; ++f)
                o[f].type !== "" && (s = new FileReader,
                s.source = o[f],
                s.onload = function(n) {
                    var i = n.target.source
                      , r = t.getOpenApp().folder + u
                      , f = n.target.result;
                    createFile(r, i.name, f, i.type).then(function() {
                        e(u)
                    }, onUploadError)
                }
                ,
                s.onerror = function() {
                    onUploadError()
                }
                ,
                s.readAsArrayBuffer(o[f]))
    }
    function f(n, i, r) {
        var u = $("input[id=" + n + "]").val(), o, f;
        u != "" && (o = u.substr(u.lastIndexOf(".")).toLowerCase(),
        $("#" + n).attr("name", t.getOpenApp().folder + r),
        f = new FormData($("#" + i)[0]),
        $.ajax({
            url: NetUtils.getServerUrl("uploader"),
            data: f,
            processData: !1,
            contentType: !1,
            type: "POST"
        }).done(function() {
            e(r)
        }).fail(function(n, t, i) {
            onUploadError(n, t, i)
        }),
        $("input[id=" + n + "]").val(""))
    }
    var t = t, i = i, r;
    o(n);
    s();
    this.refresh = function(n) {
        e(n)
    }
    ;
    r = [];
    $(document).on("click", "#deleteAssetButton", function() {
        $(".tooltip").hide();
        var n = $(this).closest("li")
          , t = n.data("assetFile")
          , i = n.data("assetDir");
        typeof t != "undefined" && typeof i != "undefined" && ($("#okCancelDialogOkButton").off("click").click(function() {
            NetUtils.ajaxGet({
                url: NetUtils.getServerUrl("ide?cmd=delete&file=" + encodeURIComponent(i + "/" + t))
            }).then(function() {
                n.remove()
            })
        }),
        $("#okCancelDialogHeader").text("Delete Asset"),
        $("#okCancelDialogMessage").text("Are you sure you want to delete '" + t + "'?"),
        $("#okCancelDialog").modal("show"))
    });
    $(document).on("click", "#renameAssetButton", function() {
        var n = $(this).closest("li"), t = n.data("assetFile"), i = n.data("assetDir"), r;
        typeof t != "undefined" && typeof i != "undefined" && ($("#renameDialogName").val(t),
        r = function() {
            if ($("#renameDialogName").val() != "")
                if (containsReservedCharacters($("#renameDialogName").val()))
                    $("#renameError").fadeIn();
                else {
                    var r = i + "/" + t
                      , u = i + "/" + $("#renameDialogName").val();
                    $("#renameDialog").modal("hide");
                    NetUtils.ajaxGet({
                        url: NetUtils.getServerUrl("ide?cmd=rename&file=" + encodeURIComponent(r) + "&newname=" + encodeURIComponent(u))
                    }).then(function() {
                        var t, i;
                        n.find("div.thumbnailFilename").text($("#renameDialogName").val());
                        n.data("assetFile", $("#renameDialogName").val());
                        t = n.closest("ul").find("li");
                        t.sort(function(n, t) {
                            var i = $(n).data("assetFile")
                              , r = $(t).data("assetFile");
                            return i.toLowerCase() < r.toLowerCase() ? -1 : i.toLowerCase() > r.toLowerCase() ? 1 : 0
                        });
                        i = n.closest("ul");
                        $.each(t, function(n, t) {
                            i.append(t)
                        })
                    })
                }
        }
        ,
        $("#renameDialogButton").off("click").click(r),
        $("#renameDialog").modal("show"))
    });
    $("input[id=imageUploadFile]").change(function() {
        f("imageUploadFile", "imageUploadForm", "/Img")
    });
    $("input[id=soundUploadFile]").change(function() {
        f("soundUploadFile", "soundUploadForm", "/Snd")
    });
    $("input[id=htmlUploadFile]").change(function() {
        f("htmlUploadFile", "htmlUploadForm", "/Html")
    });
    $("input[id=miscUploadFile]").change(function() {
        f("miscUploadFile", "miscUploadForm", "/Misc")
    })
}
function IDEConfig() {
    this.config = {
        ipAddress: "",
        zoom: 1,
        editor: {
            fontSize: 14,
            useBehaviours: !1,
            useWorker: !1
        }
    }
}
function IDEConfigWeb() {
    IDEConfig.prototype.constructor.call(this)
}
function ElementFader(n) {
    this.element = n;
    var t = 0
      , i = null
      , r = null;
    this.show = function() {
        if (t++ == 0) {
            clearTimeout(r);
            var n = this;
            i = setTimeout(function() {
                n.element.fadeIn()
            }, 250)
        }
    }
    ;
    this.hide = function() {
        if (--t == 0) {
            clearTimeout(i);
            var n = this;
            r = setTimeout(function() {
                n.element.fadeOut()
            }, 250)
        }
    }
}
function ExternalImageLoader() {
    this.load = function(n, t, i) {
        t.attr("src", n).on("error", function() {
            t.attr("src", i)
        })
    }
}
function Log(n, t) {
    this.list = n;
    this.filter = t
}
function TernService() {
    function e(t) {
        var u = n.editor.ternServer, f, i;
        for (f in u.docs)
            u.delDoc(f);
        if (t !== null) {
            for (i = 0; i < t.editorFiles.length; ++i)
                r(t.editorFiles[i]);
            t.on("fileAdded", o);
            t.on("fileRemoved", s)
        }
    }
    function r(t) {
        console.log("registerFile");
        t.getType().toLowerCase().indexOf("js") > -1 && n.editor.ternServer.addDoc(t.filename, t.session)
    }
    function o(n) {
        r(n)
    }
    function s(t) {
        var i = n.editor.ternServer;
        i.delDoc(t.filename)
    }
    function h(n) {
        var t = location.protocol === "http:";
        return new Promise(function(i) {
            n.setOptions({
                enableTern: {
                    defs: [],
                    useWorker: t,
                    switchToDoc: function(n, t) {
                        Debug.Log("switchToDoc called but not defined. name=" + n + "; start=", t)
                    },
                    startedCb: function() {
                        Debug.Log("editor.ternServer:", n.ternServer);
                        i()
                    }
                },
                enableSnippets: !1,
                enableBasicAutocompletion: !1
            })
        }
        )
    }
    function c(n, t, r) {
        for (var f, o, s, e = t.ternServer.server, h = i("Obj", r.getTypeString("Obj")), c = i("SObj", r.getTypeString("SObj")), u = 0; u < n.length; ++u)
            try {
                f = n[u];
                o = i(f, r.getTypeString(f));
                l(f, o, e, h, c)
            } catch (a) {
                Debug.Log(n[u] + ": " + a)
            }
        s = "app = new App();";
        e.addFile("Global", s)
    }
    function l(n, i, r, u, f) {
        var e;
        console.log("registerType");
        i.indexOf("new SObj") > -1 ? (e = {},
        e[" " + n + "("] = " " + n + "__SObj__(",
        e[" SObj("] = " " + n + "(",
        i = t(f + "\n" + i, e)) : i.indexOf("new Obj") > -1 && (e = {},
        e[" " + n + "("] = " " + n + "__Obj__(",
        e[" Obj("] = " " + n + "(",
        i = t(u + "\n" + i, e));
        r.addFile(n, i)
    }
    function t(n, t) {
        var i = Object.keys(t).join("|"), r;
        return i = i.replace(/\(/g, "\\("),
        r = new RegExp(i,"g"),
        n.replace(r, function(n) {
            return t[n]
        })
    }
    function i(n, i) {
        var r, f, u, e, o;
        if (ds_excludedProperties.hasOwnProperty(n)) {
            r = ds_excludedProperties[n];
            f = {};
            for (u in r)
                e = "this." + r[u],
                o = "___ex." + r[u],
                f[e] = o,
                e = "obj." + r[u],
                o = "___ex." + r[u],
                f[e] = o;
            return t(i, f)
        }
        return i
    }
    function a(t) {
        var i = n.editor.ternServer;
        if (i.closeAllTips(),
        t.oldSession !== null && t.oldSession.selection.off("changeCursor", f),
        t.session !== null)
            t.session.selection.on("changeCursor", f)
    }
    function v() {
        var t = n.editor.ternServer;
        t.closeAllTips()
    }
    function f() {
        clearTimeout(u);
        u = setTimeout(function() {
            n.editor.ternServer.updateArgHints(n.editor)
        }, 10)
    }
    var n, u;
    console.log("TernService");
    n = this;
    this.editor = null;
    this.changeArgHintsHandlers = [];
    this.init = function(n, t, i) {
        var r, u;
        console.log("tern init");
        this.editor = n;
        this.typeLoader = i;
        ace.config.loadModule("ace/ext/tern", function() {
            console.log("ace/ext/tern");
            h(n).then(function() {
                i.loadTypes(NetUtils.getServerUrl(".edit/app.js"), ds_excludedTypes).then(function(t) {
                    console.log("types" + t);
                    c(t, n, i)
                })
            })
        });
        for (r in tern_commands)
            u = tern_commands[r],
            n.commands.addCommand(u);
        t.on("appChanged", e);
        n.on("changeSession", a);
        n.on("blur", v)
    }
}
function TypeLoader() {
    function n(n, t) {
        var u, i, r, f;
        console.log("getTypeList");
        u = [];
        try {
            for (i = /function\s+(.+)\s?\(/g; (r = i.exec(n)) !== null; )
                r.index === i.lastIndex && i.lastIndex++,
                f = r[1],
                f.charAt(0) !== "_" && t.indexOf(f) === -1 && u.push(r[1])
        } catch (e) {
            Debug.Log("getTypeList: " + e)
        }
        return u
    }
    this.loadTypes = function(t, i) {
        console.log("loadTypes");
        var r = window.prompt;
        return window.prompt = function() {}
        ,
        new Promise(function(u, f) {
            console.log("Promise: " + t);
            NetUtils.ajaxGet({
                url: t
            }).then(function(t) {
                console.log("ajaxGet");
                var r = n(t, i);
                u(r)
            }, function(n) {
                f(n);
                console.log("error:" + n)
            }).catch(function(n) {
                f(n);
                console.log("error:" + n)
            }).then(function() {
                window.prompt = r
            })
        }
        )
    }
    ;
    this.getTypeString = function(n) {
        return window[n].toString()
    }
}
function sim_ajaxGet(n, t, i, r) {
    n == "SmartScript" ? sim_smartScript(t, i, r) : alert("Unknown simType!")
}
function sim_smartScript(n, t) {
    var o, f, s, u;
    if (n.url.indexOf("/ide?") > -1) {
        var e = n.url.split("?")
          , r = e[1].split("&")
          , i = getParam(r, "cmd");
        i == "getinfo" ? (o = null,
        t('{"status":"ok", "lastprog":"' + o + '", "appname":"DroidScript"}')) : i == "getsamples" ? t('{ "samples":"demo1"}') : i == "list" ? (f = getParam(r, "dir"),
        f ? t('{ "list":["' + f + '.js"] }') : t('{ "list":["test"] }')) : i == "add" ? (u = getParam(r, "prog"),
        s = getParam(r, "type"),
        document.ide.add(u, s),
        t('{"status":"ok"}')) : i == "run" ? (u = getParam(r, "prog"),
        document.ide.run(u)) : i == "stop" ? (u = getParam(r, "prog"),
        document.ide.stop(u),
        t('{"status":"ok"}')) : (alert("Unknown IDE command: " + i),
        t('{"status":"unknown command"}'))
    } else {
        var e = n.url.split("8088/")
          , h = e[1]
          , c = document.ide.get(h);
        t(c)
    }
}
function getParam(n, t) {
    for (var r, i = 0; i < n.length; i++)
        if (r = n[i].split("="),
        r.length > 1 && r[0] == t)
            return r[1];
    return null
}
function assets_onFileChoose(n) {
    var t = client.appService.getOpenApp().folder
      , i = n.substr(n.lastIndexOf("/") + 1);
    MakeFolder("/sdcard/DroidScript/" + t + "/" + assets_chooseFileFolder);
    CopyFile(n, "/sdcard/DroidScript/" + t + "/" + assets_chooseFileFolder + "/" + i);
    client.assets.refresh()
}
function getAppType() {
    return location.protocol === "chrome-extension:" ? "Chrome" : "Web"
}
function createClient(n) {
    return getAppType() === "Chrome" ? createChromeAppClient(n) : createWebAppClient(n)
}
function createChromeAppClient(n) {
    var t = new AppService
      , i = new ExternalImageLoaderChrome;
    return console.log("ClientChrome"),
    client = new ClientChrome(n,createEditor(),createSampleEditor(),t,ternEnabled ? new TernService : null,i,new Assets($(".asset-drop-target"),t,i))
}
function createWebAppClient(n) {
    var t = new AppService
      , i = new ExternalImageLoader;
    return client = new ClientWeb(n,createEditor(),createSampleEditor(),t,ternEnabled ? new TernService : null,i,new Assets($(".asset-drop-target"),t,i))
}
function createBusySpinner() {
    var n = new ElementFader($("#busyOverlay"));
    $(document).ajaxStart(function() {
        n.show()
    }).ajaxStop(function() {
        n.hide()
    });
    var t = document.getElementById("busySpinner")
      , i = new Spinner({
        lines: 11,
        length: 20,
        width: 9,
        radius: 30,
        corners: 1,
        rotate: 0,
        direction: 1,
        color: "#000",
        speed: 1,
        trail: 60,
        shadow: !0,
        hwaccel: !0,
        className: "spinner",
        zIndex: 2e9,
        top: "auto",
        left: "auto"
    }).spin(t)
}
function showMessage(n, t) {
    $("#messageDialogHeader").text(n);
    $("#messageDialogMessage").text(t);
    $("#messageDialog").modal("show")
}
function loadHomePage() {
    window.addEventListener("message", function(n) {
        var t, i;
        n.origin === "http://www.androidscript.org" && (n.data == "homePageReady" ? (clearTimeout(homePageErrorTimeout),
        $("#homeView").css("width", "100%"),
        $("#homeView").css("height", "100%"),
        $("#homeErrorPage").hide()) : (t = n.data.split("|"),
        t.length == 2 && t[0] === "downloadspk" && (i = decodeURIComponent(t[1]).replace(/^.*[\\\/]/, ""),
        $("#okCancelDialogOkButton").off("click").click(function() {
            NetUtils.ajaxGet({
                url: NetUtils.getServerUrl("ide?cmd=downloadspk&url=" + encodeURIComponent(t[1]))
            })
        }),
        $("#okCancelDialogHeader").text("Install SPK"),
        $("#okCancelDialogMessage").text("Click OK to download " + i + " and follow the instructions on your Android device."),
        $("#okCancelDialog").modal("show"))))
    });
    var n;
    n = agent.indexOf("Remix") > -1 || agent.indexOf("Hudl") > -1 ? client.createIFrame("homeView", "") : client.createIFrame("homeView", "http://www.androidscript.org/Home/home.html?demos=true&v" + Math.round(Math.random() * 1e6));
    n.appendTo(".homeWrapper");
    n.on("loadstop", function() {
        n[0].contentWindow.postMessage({
            command: "handshake"
        }, "*")
    });
    homePageErrorTimeout = setTimeout(function() {
        $("#homeErrorPage").show()
    }, 5e3)
}
function onEditorResize() {
    var n = $("#editorTabs").outerHeight(!0)
      , t = $("#editorToolBar").outerHeight(!0);
    $("#editor").css("top", n + t);
    $("#editorTabs").data("tabdrop") != null && $("#editorTabs").data("tabdrop").layout()
}
function createEditor() {
    editor = ace.edit("editor");
    editor.setTheme("ace/theme/textmate");
    editor.$blockScrolling = Infinity;
    editor.on("changeSession", function(n) {
        if (n.session) {
            n.session.on("tokenizerUpdate", onTokensChanged);
            n.session.on("change", onDocumentChanged);
            var t = {
                first: 0,
                last: n.session.getLength()
            };
            onTokensChanged({
                data: t
            });
            client.applyConfigForSession(n.session)
        }
        n.oldSession && (n.oldSession.removeEventListener("tokenizerUpdate", onTokensChanged),
        n.oldSession.removeEventListener("change", onDocumentChanged))
    });
    return editor
}
function createSampleEditor() {
    return sampleEditor = ace.edit("sampleEditor"),
    sampleEditor.setTheme("ace/theme/textmate"),
    sampleEditor.getSession().setMode("ace/mode/javascript"),
    sampleEditor.setReadOnly(!0),
    sampleEditor.renderer.setShowGutter(!1),
    sampleEditor.setHighlightActiveLine(!1),
    sampleEditor.getSession().setUseWorker(!1),
    sampleEditor.$blockScrolling = Infinity,
    sampleEditor
}
function updateTooltips() {
    $("[data-toggle=tooltip]").tooltip({
        container: "body"
    })
}
function showEditorError(n) {
    var i;
    n = n.replace("Script Error: ", "");
    var f = n.split("|")
      , r = f[1] - 1
      , e = decodeURIComponent(f[2].replace(/^.*[\\\/]/, ""))
      , t = null
      , u = client.appService.getOpenApp();
    for (i = 0; i < u.getEditorFileCount(); ++i)
        if (u.getEditorFile(i).filename == e) {
            t = u.getEditorFile(i);
            break
        }
    t && loadEditorFile(t, u).then(function() {
        var n = t.session.getAnnotations(), i;
        n.push({
            row: r,
            column: 0,
            text: f[0],
            type: "error"
        });
        t.session.setAnnotations(n);
        i = new Range(r,0,r,Infinity);
        t.errorMarkers.push(t.session.addMarker(i, "ace_error-marker", "line"));
        $('#editorTabs a[href="' + t.tabId + '"]').tab("show");
        client.editor.scrollToLine(r, !0, !0)
    })
}
function onExpand() {
    $("#leftPanel").hasClass("span6") ? ($("#leftPanel").removeClass("span6"),
    $("#leftPanel").addClass("span8"),
    $("#rightPanel").removeClass("span6"),
    $("#rightPanel").addClass("span4"),
    $("#expBtn img").attr("src", Resources.COLLAPSE),
    $("#expBtn").attr("title", "Collapse Editor").tooltip("fixTitle").tooltip("show")) : ($("#leftPanel").removeClass("span8"),
    $("#leftPanel").addClass("span6"),
    $("#rightPanel").removeClass("span4"),
    $("#rightPanel").addClass("span6"),
    $("#expBtn i").removeClass(),
    $("#expBtn i").addClass(),
    $("#expBtn img").attr("src", Resources.EXPAND),
    $("#expBtn").attr("title", "Expand Editor").tooltip("fixTitle").tooltip("show"));
    client.editor.resize();
    $("#editorTabs").data("tabdrop").layout()
}
function onDebugFilter() {
    var n = $("#debugFilter").val().trim(), t;
    n.length == 0 ? $("#debugList li").each(function() {
        $(this).show()
    }) : (n = n.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"),
    t = new RegExp(n,"i"),
    $("#debugList li").each(function() {
        t.test($(this).text()) ? $(this).show() : $(this).hide()
    }));
    Logger.scrollToBottom()
}
function webSocketIsConnected() {
    return webSocket != null && (webSocket.readyState == 0 || webSocket.readyState == 1)
}
function openWebSocket() {
    webSocketIsConnected() || (window.WebSocket ? (webSocket = new WebSocket(NetUtils.getServerWSUrl("")),
    webSocket.onopen = webSocket_onopen,
    webSocket.onmessage = webSocket_onmessage,
    webSocket.onclose = webSocket_onclose,
    webSocket.onerror = webSocket_onerror) : Logger.error("WebSocket not supported by this browser, the debug window will not be available."))
}
function webSocket_onopen() {
    Logger.message("[Connected]");
    $("#ideConnected").show();
    $("#ideDisconnected").hide();
    var n = "<i class='fa fa-wifi connected-green' style='font-size:20px'><\/i> Connected to " + serverInfo.devicename;
    $("#ideConnected").popover("destroy");
    $("#ideConnected").popover({
        html: !0,
        placement: "left",
        trigger: "hover",
        content: n
    });
    $("#ideConnected").popover("show");
    setTimeout(function() {
        $("#ideConnected").popover("hide")
    }, 4e3);
    webSocket.send("debug");
    webSocketKeepAliveTimer = setInterval(function() {
        Debug.Log("sending keepalive");
        webSocket.send("keepalive")
    }, 5e3)
}
function webSocket_onmessage(n) {
    var t = n.data;
    t.indexOf("Script Error") > -1 ? (Logger.error(t),
    showEditorError(t)) : t.indexOf("WARNING") > -1 ? Logger.warning(t) : t.indexOf("svc:") > -1 ? Logger.service(t) : Logger.message(t)
}
function webSocket_onclose() {
    function n(t) {
        if (t == 4) {
            onRequestError();
            return
        }
        connect(serverIPAddress).then(function() {
            refreshAppsList()
        }, function(i) {
            i == "PasswordError" ? (serverPass = "",
            n(++t)) : onRequestError()
        })
    }
    Logger.message("[Disconnected]");
    $("#ideDisconnected").show();
    $("#ideConnected").hide();
    $("#ideDisconnected").popover("destroy");
    $("#ideDisconnected").popover({
        html: !0,
        placement: "left",
        trigger: "hover",
        content: "Disconnected. Click <i class='fa fa-wifi disconnected-red' style='font-size:20px'><\/i> to reconnect"
    });
    $("#ideDisconnected").popover("show");
    setTimeout(function() {
        $("#ideDisconnected").popover("hide")
    }, 4e3);
    $("#ideDisconnected").off("click").on("click", function() {
        n(0)
    });
    clearInterval(webSocketKeepAliveTimer);
    webSocketKeepAliveTimer = null
}
function webSocket_onerror(n) {
    Logger.error("Connection Error: " + n.data)
}
function onConnect() {
    console.log("OnConnect");
    $("#connectError").hide();
    $("#passwordError").hide();
    $("#connectButton").hide();
    connect($("#serverIPAddress").val()).then(function(n) {
        $("#connectDialog").modal("hide");
        connected(n)
    }, function(n) {
        $("#connectDialog").modal("show");
        n == "PasswordError" ? $("#passwordError").fadeIn() : $("#connectError").fadeIn();
        $("#connectButton").fadeIn()
    })
}
function connect(n) {
    return new Promise(function(t, i) {
        webSocketIsConnected() ? t(serverInfo) : (serverIPAddress = n.split(":")[0],
        getServerInfo().then(function(n) {
            $("#connectDialog").modal("hide");
            serverInfo = n;
            serverInfo.usepass ? loginWithPassword(serverPass).then(function() {
                openWebSocket();
                t(serverInfo)
            }, function() {
                i("PasswordError")
            }) : (serverPass = "",
            openWebSocket(),
            t(serverInfo))
        }, function() {
            i("ConnectError")
        }))
    }
    )
}
function getServerInfo() {
    return new Promise(function(n, t) {
        NetUtils.ajaxGetNoConnect({
            url: NetUtils.getServerUrl("ide?cmd=getinfo"),
            timeout: 5e3
        }).then(function(t) {
            var i = JSON.parse(t);
            typeof i.usepass == "undefined" && (i.usepass = !1);
            typeof i.devicename == "undefined" && (i.devicename = serverIPAddress);
            n(i)
        }, t)
    }
    )
}
function loginWithPassword(n) {
    return new Promise(function(t, i) {
        function r(n) {
            n.length > 0 ? NetUtils.ajaxGetNoConnect({
                url: NetUtils.getServerUrl("ide?cmd=login&pass=" + n),
                timeout: 5e3
            }).then(function(r) {
                var u = JSON.parse(r);
                u.status == "ok" ? (serverPass = n,
                t()) : i(u.status)
            }, i) : i()
        }
        if (typeof n == "undefined" || n == "")
            if ($("#passwordDialogOkButton").off("click").click(function() {
                $("#passwordDialogError").hide();
                var n = $("#passwordDialogPassword").val();
                n = btoa(n);
                r(n)
            }),
            $("#passwordDialogCancelButton").off("click").click(function() {
                $("#passwordDialogError").hide();
                i("PasswordCanceled")
            }),
            $("#passwordDialogPassword").val(""),
            $("#passwordDialog").is(":visible")) {
                $("#passwordDialog").on("hidden", function() {
                    $("#passwordDialog").off("hidden");
                    $("#passwordDialog").modal("show")
                });
                $("#passwordDialog").modal("hide")
            } else
                $("#passwordDialog").modal("show");
        else
            r(n)
    }
    )
}
function connected(n) {
    console.log("connected");
    client.setServerInfo(serverIPAddress, n);
    var t = n.appname;
    $("#ideTitle").append(" " + t);
    document.title = t;
    refreshAppsList().then(function() {
        var i, r, t;
        populateSampleContents();
        i = NetUtils.getServerUrl(".edit/docs/Docs.htm");
        r = client.createIFrame("docs", i);
        docsEnabled && r.appendTo(".docsWrapper");
        enableBrowserTab();
        t = n.lastprog;
        t != "null" && client.appService.getApp(t) != null ? (Logger.message("Opening most recently edited app - '" + t + "'...."),
        openApp(client.appService.getApp(t))) : $('#leftPanelTabs a[href="#appsTab"]').tab("show")
    });
    refreshExtensionList()
}
function enableBrowserTab() {
    var n, t, i;
    typeof serverInfo.premium != "undefined" && serverInfo.premium ? ($("#leftPanelTabs").append($('<li id="browseTab" data-toggle="tooltip" data-placement="right" title="Device Browser"><a class="no-min-width" href="#browserTab"  data-toggle="tab" style="min-width:0px"><i class="fa fa-mobile file-browser-tab"><\/i><\/a><\/li>')),
    $("#leftPanel .tab-content").append($('<div class="tab-pane" id="browserTab" style="height: 100%;"><div class="browserWrapper"><\/div><\/div>')),
    n = NetUtils.getUrl("http", 8889) + "/browse",
    t = client.createIFrame("browser", n),
    t.appendTo(".browserWrapper")) : ($("#leftPanelTabs").append($('<li id="browseTab" data-toggle="tooltip" data-placement="right" title="Device Browser"><a class="no-min-width" href="#"  data-toggle="tab" style="min-width:0px"><i class="fa fa-mobile file-browser-tab"><\/i><\/a><\/li>')),
    i = "<br><br><br><br>[Please subscribe to <b>DroidScript Premium<\/b> to use this feature]",
    $("#leftPanel .tab-content").append($('<div class="tab-pane" id="browserTab" style="height: 100%;"><div style="text-align:center;vertical-align:middle;">' + i + "<\/div><\/div>")),
    document.querySelector("#browseTab").addEventListener("click", function() {
        $("#messageDialogHeader").text("Premium Feature");
        $("#messageDialogMessage").text("Please subscribe to 'DroidScript Premium' to use this feature");
        $("#messageDialog").modal("show")
    }))
}
function onRequestError() {
    $("#errorDialog").modal("show")
}
function onUploadError() {
    $("#errorDialog").modal("show")
}
function onSave() {
    save("").then(null, onRequestError)
}
function save(name) {
    return new Promise(function(t, i) {
		function download(data, name) {
			var a = document.createElement("a"),
				file = new Blob([data], {type: "text/plain"});
			if (window.navigator.msSaveOrOpenBlob) // IE10+
				window.navigator.msSaveOrOpenBlob(file, filename);
			else { // Others
				var url = URL.createObjectURL(file);
				a.href = url;
				a.download = filename;
				document.body.appendChild(a);
				a.click();
				setTimeout(function() {
					document.body.removeChild(a);
					window.URL.revokeObjectURL(url);  
				}, 0); 
			}
		}
    }
    )
}
function clearAnnotations(n) {
    for (var t, r, i = 0; i < n.getEditorFileCount(); ++i) {
        if (t = n.getEditorFile(i),
        t.session) {
            for (t.session.clearAnnotations(),
            r = 0; r < t.errorMarkers.length; ++r)
                t.session.removeMarker(t.errorMarkers[r]);
            t.session.$worker && t.session.$worker.call("onUpdate")
        }
        t.errorMarkers = []
    }
}
function saveAll() {
    return new Promise(function(n, t) {
        for (var r = [], u = client.appService.getOpenApp(), i = 0; i < u.getEditorFileCount(); ++i)
            r.push(save(u.getEditorFile(i)));
        Promise.all(r).then(n, t)
    }
    )
}
function onRun() {
    NetUtils.ajaxGet({
        url: NetUtils.getServerUrl("ide?cmd=stop")
    }).then(function() {
        return saveAll()
    }).then(function() {
        Logger.clear();
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=run&prog=" + encodeURIComponent(client.appService.getOpenApp().getName()))
        })
    }, function() {
        onRequestError()
    })
}
function onStop() {
    NetUtils.ajaxGet({
        url: NetUtils.getServerUrl("ide?cmd=stop")
    }).then(null, onRequestError)
}
function onCopy() {
    agent.indexOf("Android") > -1 && SetClipboardText(editor.getCopyText())
}
function onPaste() {
    editor.insert(GetClipboardText())
}
function addSampleButton(n, t, i) {
    var u = '<div><a id=\'sampleButton\' class="btn btn-flat" style="width: 100%; padding: 0px"><p style="margin: 5px; text-align: left; font-size: 16px"><b>' + n + '<\/b><\/p><p style="margin: 5px; text-align: left;">' + t + "<\/p><\/a><\/div>"
      , r = $(u);
    r.data("title", n);
    r.data("type", i);
    $("#samplesContentList").append(r)
}
function populateSampleContents() {
    console.log();
    NetUtils.ajaxGet({
        url: NetUtils.getServerUrl("ide?cmd=getsamples")
    }).then(function(n) {
        for (var t, u = JSON.parse(n).samples, r = u.split(","), i = 0; i < r.length; ++i)
            t = r[i].split(":"),
            addSampleButton(t[0], t[1], t[2])
    })
}
function runSample() {
    var n = currentSample.split(" ").join("_");
    NetUtils.ajaxGet({
        url: NetUtils.getServerUrl("ide?cmd=sample&name=" + n)
    })
}
function onCopySample() {
    agent.indexOf("Android") > -1 && SetClipboardText(sampleEditor.getCopyText())
}
function onSampleFilter() {
    var n = $("#sampleFilter").val().trim(), t;
    n.length == 0 ? $("#samplesContentList").children("div").each(function() {
        $(this).show()
    }) : (n = n.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"),
    t = new RegExp(n,"i"),
    $("#samplesContentList").children("div").each(function() {
        var n = !1;
        $(this).find("p").each(function() {
            n |= t.test($(this).text())
        });
        n ? $(this).show() : $(this).hide()
    }))
}
function appendAppToAppsList(n) {
    var i = '<li style="position: relative;" class="app-thumbnail">\n<div id="openAppButton" class="thumbnail" style="border: 0px; box-shadow: none;">\n<div style="text-align: center; vertical-align: middle;"><img class="app-image">\n<\/div><div><p class="appFilename">' + n.getName() + '<\/p>\n<\/div><\/div>\n<div id="appButtons" style="opacity: 0;">\n<div style="position: absolute; top: 0px; margin: 5px 10px;">\n<a id="renameAppButton" class="btn btn-mini btn-flat btn-noborder" data-toggle="tooltip" title="Rename"><i class="icon-edit"><\/i><\/a>\n<\/div>\n<div style="position: absolute; top: 0px; right: 0px; margin: 5px 10px;">\n<a id="deleteAppButton" class="btn btn-mini btn-flat btn-noborder" data-toggle="tooltip" title="Delete"><i class="icon-trash"><\/i><\/a>\n<\/div>\n<\/div>\n<\/li>\n'
      , t = $(i);
    t.data("appName", n.getName());
    t.hover(function() {
        $(this).find("img").animate({
            opacity: "1.0"
        }, "fast");
        $(this).find("div#appButtons").animate({
            opacity: "1.0"
        }, "fast")
    }, function() {
        $(this).find("img").animate({
            opacity: "0.7"
        }, "fast");
        $(this).find("div#appButtons").animate({
            opacity: "0.0"
        }, "fast")
    });
    $("#appsList").append(t);
    client.extImageLoader.load(NetUtils.getServerUrl(n.getIconPath()), t.find(".app-image"), Resources.APP_ICON)
}
function refreshExtensionList() {
    return console.log("refreshExtensionList"),
    new Promise(function(n, t) {
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=Extensions")
        }).then(function(n) {
            var u = JSON.parse(n).list, f, r, t, i, e, o, s;
            for (console.log("extensions: " + u),
            r = "",
            t = 0; t < u.length; t++)
                i = u[t].replace(".html", ""),
                r += '<li data-toggle="tooltip" title="Plugin"><a href="#extension' + i + '" data-toggle="tab" style="min-width:0px"><i class="icon-star"><\/i> ' + i + "<\/a><\/li>";
            for (f = $(r),
            $("#rightPanelTabs").append(f),
            r = "",
            t = 0; t < u.length; t++)
                i = u[t].replace(".html", ""),
                e = NetUtils.getServerUrl("Extensions/" + i + "/" + i + ".html"),
                r += '<div class="tab-pane" id="extension' + i + '" style="height:100%;"><div class="pluginWrapper"><iframe src="' + e + '" frameborder="0" style="width:100%;height:100%;"><\/iframe><\/div><\/div><\/div>';
            o = $(r);
            $("#rightPanelTabsContent").append(o);
            s = $("#rightPanelTabs").outerHeight(!0);
            $(".pluginWrapper").css("top", s)
        }, t)
    }
    )
}
function refreshAppsList() {
    return console.log("refreshAppsList"),
    new Promise(function(n, t) {
        var i = client.appService.getOpenApp();
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=")
        }).then(function(t) {
            var o = JSON.parse(t).list, r, u, e, f;
            for (client.appService.clear(),
            $("#appsList").empty(),
            r = "",
            console.log("New Regular App"),
            r = '<li class="app-thumbnail" id="newApp">\n<div class="thumbnail" style="border: 0px; box-shadow: none;">\n<div style="text-align: center; vertical-align: middle;"><img class="app-image" src="resources/droidscript_app_new_js.png">\n<\/div><div><p class="appFilename">New App...<\/p>\n<\/div><\/div>\n<\/li>\n',
            u = $(r),
            $("#appsList").append(u),
            r = '<li class="app-thumbnail" id="newHtmlApp">\n<div class="thumbnail" style="border: 0px; box-shadow: none;">\n<div style="text-align: center; vertical-align: middle;"><img class="app-image" src="resources/droidscript_app_new_html.png">\n<\/div><div><p class="appFilename">New Html App...<\/p>\n<\/div><\/div>\n<\/li>\n',
            u = $(r),
            $("#appsList").append(u),
            e = [],
            f = 0; f < o.length; f++)
                e.push(getDroidScriptApp(o[f]));
            Promise.all(e).then(function(t) {
                for (var r = 0; r < t.length; ++r)
                    t[r] && (client.appService.addApp(t[r]),
                    appendAppToAppsList(t[r]));
                i != null && (client.appService.removeApp(i.getName()),
                client.appService.addApp(i));
                n()
            }, onRequestError)
        }, t)
    }
    )
}
function sortAppList() {
    var i = $("#appsList #newApp"), r = $("#appsList #newHtmlApp"), t, n;
    i.remove();
    r.remove();
    t = $("#appsList li").get();
    t.sort(function(n, t) {
        var i = $(n).data("appName")
          , r = $(t).data("appName");
        return i.toLowerCase() < r.toLowerCase() ? -1 : i.toLowerCase() > r.toLowerCase() ? 1 : 0
    });
    n = $("#appsList");
    $.each(t, function(t, i) {
        n.append(i)
    });
    n.prepend(r);
    n.prepend(i)
}
function getDroidScriptApp(n) {
    return new Promise(function(t, i) {
        var r = null;
        n.charAt(0) != "~" && n.charAt(0) != "." ? NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=list&dir=" + encodeURIComponent(n))
        }).then(function(i) {
            var f = JSON.parse(i).list, e, u;
            if (f.indexOf(n + ".js") != -1 || f.indexOf(n + ".html") != -1)
                for (r = new DroidScriptApp(n),
                e = 0; e < f.length; ++e)
                    isSupportedFileType(f[e]) && (u = new DroidScriptAppFile(f[e]),
                    r.addEditorFile(u),
                    u.displayName.toUpperCase() == n.toUpperCase() ? (u.canDelete = !1,
                    r.activeEditorFile = u,
                    r.mainEditorFile = u) : u.canDelete = !0);
            t(r)
        }, i) : t(r)
    }
    )
}
function newApp(n) {
    n == "js" ? $("#newAppDialogTitle").text("New App") : n == "html" ? $("#newAppDialogTitle").text("New Html App") : Logger.message("Cannot create app, unknown app type: " + n);
    var t = function() {
        var t = $("#newAppDialogAppName").val(), r = $("#templateChoice").text(), i;
        t.length != 0 && (containsReservedCharacters(t) ? $("#newAppError").fadeIn() : ($("#newAppDialog").modal("hide"),
        i = "ide?cmd=add&prog=" + encodeURIComponent(t) + "&type=" + n + "&template=" + encodeURIComponent(r),
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl(i)
        }).then(function() {
            return getDroidScriptApp(t)
        }).then(function(n) {
            client.appService.addApp(n);
            appendAppToAppsList(n);
            sortAppList();
            openApp(n)
        }, onRequestError)))
    };
    $("#newAppDialogButton").off("click").click(t);
    $("#newAppDialog").modal("show");
    $("#templateOptions").empty();
    $("#templateOptions").append('<li><a tabindex="-1" href="#">Basic<\/a><\/li>');
    n == "js" && ($("#templateOptions").append('<li><a tabindex="-1" href="#">Background Service ' + (serverInfo.premium ? "" : "?") + "<\/a><\/li>"),
    $("#templateOptions").append('<li><a tabindex="-1" href="#">Web Server ' + (serverInfo.premium ? "" : "?") + "<\/a><\/li>"),
    $("#templateOptions").append('<li><a tabindex="-1" href="#">Phone: Multi-page with Menu Drawer ' + (serverInfo.premium ? "" : "?") + "<\/a><\/li>"),
    $("#templateOptions").append('<li><a tabindex="-1" href="#">Tablet: Information Kiosk ' + (serverInfo.premium ? "" : "?") + "<\/a><\/li>"));
    $("#templateOptions li a").click(function() {
        var n = $(this).text();
        n.indexOf("?") > -1 && !serverInfo.premium ? $("#newTemplateError").fadeIn() : $("#newTemplateError").hide();
        n = n.replace("?", "").trim();
        $("#templateChoice").html(n)
    })
}
function openApp(n) {
    loadEditorFile(n.mainEditorFile, n).then(function() {
        var i, t;
        for (client.appService.getOpenApp() != null && client.appService.getOpenApp().close(),
        $("#editorTabs").empty(),
        i = [],
        t = 0; t < n.getEditorFileCount(); ++t)
            n.getEditorFile(t) == n.mainEditorFile ? $("#editorTabs").prepend(createEditorFileTab(n.getEditorFile(t))) : $("#editorTabs").append(createEditorFileTab(n.getEditorFile(t))),
            i.push(loadEditorFile(n.getEditorFile(t), n));
        Promise.all(i).then(function() {
            client.appService.setOpenApp(n);
            n.activeEditorFile = n.mainEditorFile;
            $('ul[id="editorTabs"] a').on("shown", onEditorFileTabChanged);
            $('#editorTabs a[href="' + n.activeEditorFile.tabId + '"]').tab("show");
            $('#leftPanelTabs a[href="#editorTab"]').tab("show");
            client.assets.refresh();
            n.getName().substring(0, 4) == "SWS-" ? ($("#runBtn").prop("disabled", !0),
            $("#stopBtn").prop("disabled", !0)) : ($("#runBtn").prop("disabled", !1),
            $("#stopBtn").prop("disabled", !1));
            $("#editorTabs").tabdrop();
            client.editor.resize()
        }, onRequestError)
    }, onRequestError)
}
function onEditorFileTabChanged(n) {
    var i = n.target.getAttribute("href")
      , t = client.appService.getOpenApp();
    t.activeEditorFile = t.getEditorFileForTab(i);
    loadEditorFile(t.activeEditorFile, t).then(function() {
        client.editor.setSession(t.activeEditorFile.session);
        client.editor.focus()
    }, function() {
        if (n.relatedTarget != null) {
            var t = $('#editorTabs a[href="' + n.relatedTarget.getAttribute("href") + '"]');
            t.tab("show")
        }
        onRequestError()
    })
}
function loadEditorFile(n, t) {
    return new Promise(function(i, r) {
        n.session == null ? (Debug.Log("loadEditorFile creating session"),
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl(encodeURIComponent(t.folder) + "/" + encodeURIComponent(n.filename)),
            dataType: "text"
        }).then(function(t) {
            n.session = t == null || t == "" ? createEditSession(n.getType(), $("#phoneAppTemplate").text()) : createEditSession(n.getType(), t);
            Debug.Log("session created");
            i()
        }, r)) : (Debug.Log("loadEditorFile session already created"),
        i())
    }
    )
}
function createEditorFileTab(n) {
    var i = "", t;
    return i = n.canDelete ? '<li style="position:relative"><a style="padding-right:25px" href="' + n.tabId + '" data-toggle="tab">' + n.filename + '<\/a><button class="close deleteFileBtn" data-toggle="tooltip" data-original-title="Delete"><i class="icon-trash"><\/i><\/button><\/li>' : '<li><a href="' + n.tabId + '" data-toggle="tab">' + n.filename + "<\/a><\/li>",
    t = $(i),
    t.data("editorFile", n),
    t
}
function isSupportedFileType(n) {
    var t = n.toLowerCase();
    return t.indexOf(".js") != -1 || t.indexOf(".htm") != -1 || t.indexOf(".css") != -1 || t.indexOf(".txt") != -1 || t.indexOf(".json") != -1 ? !0 : !1
}
function newFile(n, t) {
    var i, r, u;
    if (n.trim().length == 0) {
        $("#newFileError").html("<b>Emtpy Filename.<\/b> Please enter a filename.");
        $("#newFileError").fadeIn();
        return
    }
    for (i = "",
    t.toLowerCase().localeCompare("text") == 0 ? n.toLowerCase().indexOf(".txt") == -1 && (n += ".txt") : t.toLowerCase().localeCompare("html") == 0 ? (n.toLowerCase().indexOf(".htm") == -1 && (n += ".html"),
    i = "<html>\n\t<head>\n\t\t<title>Hello World!<\/title>\n\t<\/head>\n\t<body>\n\t\t<p>Hello World!<\/p>\n\t<\/body>\n<\/html>") : t.toLowerCase().localeCompare("css") == 0 ? (n.toLowerCase().indexOf(".css") == -1 && (n += ".css"),
    i = "body\n{\n\n}") : t.toLowerCase().localeCompare("json") == 0 ? (n.toLowerCase().indexOf(".json") == -1 && (n += ".json"),
    i = "{\n\n}") : n.toLowerCase().indexOf(".js") == -1 && (n += ".js"),
    r = client.appService.getOpenApp(),
    u = 0; u < r.getEditorFileCount(); ++u)
        if (r.getEditorFile(u).filename.toLowerCase() == n.toLowerCase()) {
            $("#newFileError").html("<b>Cannot Create File.<\/b> A file with the name '" + n + "' already exists.");
            $("#newFileError").fadeIn();
            return
        }
    createFile(client.appService.getOpenApp().folder, n, i).then(function() {
        var t = new DroidScriptAppFile(n), u;
        t.canDelete = !0;
        t.session = createEditSession(t.getType(), i);
        r.addEditorFile(t);
        $("#editorTabs").append(createEditorFileTab(t));
        $("#editorTabs").data("tabdrop").layout();
        client.appService.getOpenApp().activeEditorFile = t;
        u = $('#editorTabs a[href="' + client.appService.getOpenApp().activeEditorFile.tabId + '"]');
        u.on("shown", onEditorFileTabChanged);
        u.tab("show");
        $("#newFileDialog").modal("hide")
    }, function() {
        Logger.message("Failed to create file " + n + ". Is DroidScript running and Wi-Fi enabled?")
    })
}
function createFile(n, t, i, r) {
    return new Promise(function(u, f) {
        var e = NetUtils.getServerUrl("uploader");
        typeof r == "undefined" && (r = "text/plain");
        connect(serverIPAddress).then(function() {
            var s = new FormData, h = new Blob([i],{
                type: r
            }), o;
            s.append(n, h, t);
            o = $.ajax({
                url: e,
                data: s,
                cache: !1,
                contentType: !1,
                processData: !1,
                type: "POST"
            });
            o.fail(function(n, r) {
                Debug.Log("createFile(" + t + ", " + i + ") failed: " + r);
                f()
            });
            o.done(function() {
                u()
            })
        }, f)
    }
    )
}
function createEditSession(n, t) {
    var u = new Document(t), i = "ace/mode/javascript", r;
    return n.toLowerCase().indexOf("htm") != -1 ? i = "ace/mode/html" : n.toLowerCase().indexOf("css") != -1 ? i = "ace/mode/css" : n.toLowerCase().indexOf("txt") != -1 ? i = "ace/mode/text" : n.toLowerCase().indexOf("json") != -1 && (i = "ace/mode/json"),
    r = new EditSession(u,i),
    r.setUseWorker(!1),
    r.setUndoManager(new UndoManager),
    r
}
function onDocumentChanged() {
    var n = client.appService.getOpenApp()
      , t = n.activeEditorFile;
    setModified(t, !0)
}
function setModified(n, t) {
    var r = client.appService.getOpenApp(), i;
    r.setModified(n, t);
    i = n.modified ? "*" + n.filename : n.filename;
    $('#editorTabs a[href="' + n.tabId + '"]').text(i);
    $("#editorTabs").data("tabdrop").layout()
}
function onTokensChanged() {
    for (var t, n, e, o, u, f, i = [], s = client.appService.getOpenApp().activeEditorFile.session.getLength(), r = 0; r <= s; ++r)
        for (t = client.appService.getOpenApp().activeEditorFile.session.getTokens(r),
        n = 0; n < t.length; ++n)
            if (console.log("token:" + t[n].type + " tokenvalue:" + t[n].value),
            t[n].type == "storage.type" && t[n].value == "function") {
                t.length > n + 2 && (e = t[n + 2],
                e.type == "entity.name.function" && i.push({
                    name: e.value,
                    line: r + 1
                }));
                break
            } else
                t[n].type == "entity.name.function" && i.push({
                    name: t[n].value,
                    line: r + 1
                });
    for (i.sort(function(n, t) {
        return n.name.toLowerCase() < t.name.toLowerCase() ? -1 : n.name.toLowerCase() > t.name.toLowerCase() ? 1 : 0
    }),
    o = "",
    u = 0; u < i.length; ++u)
        f = '<li id="' + i[u].line + '">',
        f += '<a href="#">' + i[u].name + "<\/a>",
        f += "<\/li>\n",
        o += f;
    $("#functionJumpList").html(o);
    $("ul[id*=functionJumpList] li").click(function() {
        client.editor.gotoLine($(this).attr("id"), 0, !0);
        client.editor.focus()
    })
}
function onCollapseAll() {
    var n = client.appService.getOpenApp().activeEditorFile.session;
    n.foldAll(0, n.getLength(), 0)
}
function onExpandAll() {
    var n = client.appService.getOpenApp().activeEditorFile.session
      , t = new Range(0,0,n.getLength(),0);
    n.unfold(t, !1)
}
function containsReservedCharacters(n) {
    return /[|\\?*<\":>\[\]\/']+/.test(n)
}
function sortList(n) {
    return n.sort(function(n, t) {
        return n.toLowerCase().localeCompare(t.toLowerCase())
    }),
    n
}
function stringToArrayBuffer(n) {
    for (var i = new ArrayBuffer(n.length * 2), r = new Uint8Array(i), t = 0, u = n.length; t < u; t++)
        r[t] = n.charCodeAt(t);
    return i
}
function arrayBufferToString(n) {
    return String.fromCharCode.apply(null, new Uint8Array(n))
}
var uniqueTabIdCounter, assets_chooseFileFolder, _localStorageId, Debug, client, docsEnabled, ternEnabled, webSocketKeepAliveTimer;
DroidScriptApp.prototype.getName = function() {
    return this.folder
}
;
DroidScriptApp.prototype.getIconPath = function() {
    return this.folder + "/Img/" + this.folder + ".png"
}
;
DroidScriptApp.prototype.isModified = function() {
    for (var n = 0; n < this.editorFiles.length; ++n)
        if (this.editorFiles[n].modified)
            return !0;
    return !1
}
;
DroidScriptApp.prototype.getEditorFileCount = function() {
    return this.editorFiles.length
}
;
DroidScriptApp.prototype.indexOf = function(n) {
    return this.editorFiles.indexOf(n)
}
;
DroidScriptApp.prototype.getEditorFile = function(n) {
    return this.editorFiles[n]
}
;
DroidScriptApp.prototype.addEditorFile = function(n) {
    this.editorFiles.push(n);
    this.fireFileAdded(n)
}
;
DroidScriptApp.prototype.removeEditorFile = function(n) {
    var t = this.editorFiles.indexOf(n);
    this.editorFiles.splice(t, 1);
    this.fireFileRemoved(n)
}
;
DroidScriptApp.prototype.getEditorFileForTab = function(n) {
    for (var t = 0; t < this.editorFiles.length; ++t)
        if (this.editorFiles[t].tabId == n)
            return this.editorFiles[t];
    return null
}
;
DroidScriptApp.prototype.getEditorFileForFilename = function(n) {
    for (var t = 0; t < this.editorFiles.length; ++t)
        if (this.editorFiles[t].filename == n)
            return this.editorFiles[t];
    return null
}
;
DroidScriptApp.prototype.getEditorFileForSession = function(n) {
    for (var t = 0; t < this.editorFiles.length; ++t)
        if (this.editorFiles[t].session == n)
            return this.editorFiles[t];
    return null
}
;
DroidScriptApp.prototype.getEditorFilePath = function(n) {
    return this.folder + "/" + n.filename
}
;
DroidScriptApp.prototype.getType = function() {
    return this.mainEditorFile.getType()
}
;
DroidScriptApp.prototype.close = function() {
    for (var t, n = 0; n < this.editorFiles.length; ++n)
        this.editorFiles[n].close();
    for (t in this.eventHandlers)
        this.eventHandlers.hasOwnProperty(t) && (this.eventHandlers[t] = [])
}
;
DroidScriptApp.prototype.rename = function(n) {
    var t = this;
    return new Promise(function(i, r) {
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=rename&file=" + encodeURIComponent(t.folder) + "&newname=" + encodeURIComponent(n))
        }).then(function() {
            t.folder = n;
            var i = n + "/" + t.mainEditorFile.filename
              , r = n + "/" + n + "." + t.mainEditorFile.getType();
            return NetUtils.ajaxGet({
                url: NetUtils.getServerUrl("ide?cmd=rename&file=" + encodeURIComponent(i) + "&newname=" + encodeURIComponent(r))
            })
        }).then(function() {
            t.mainEditorFile.displayName = n;
            t.mainEditorFile.filename = n + "." + t.mainEditorFile.getType();
            i()
        }, r)
    }
    )
}
;
DroidScriptApp.prototype.delete = function() {
    var n = this.getName();
    return new Promise(function(t, i) {
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=delete&file=" + encodeURIComponent(n))
        }).then(t, i)
    }
    )
}
;
DroidScriptApp.prototype.setModified = function(n, t) {
    n.setModified(t);
    this.fireFileModified(n, t)
}
;
DroidScriptApp.prototype.on = function(n, t) {
    this.eventHandlers[n].push(t)
}
;
DroidScriptApp.prototype.off = function(n, t) {
    this.eventHandlers[n] = eventHandlers[n].filter(function(n) {
        if (n !== t)
            return n
    })
}
;
DroidScriptApp.prototype.fireFileAdded = function(n) {
    this.eventHandlers.fileAdded.forEach(function(t) {
        t.call(this, n)
    })
}
;
DroidScriptApp.prototype.fireFileRemoved = function(n) {
    this.eventHandlers.fileRemoved.forEach(function(t) {
        t.call(this, n)
    })
}
;
DroidScriptApp.prototype.fireFileRenamed = function(n) {
    this.eventHandlers.fileRenamed.forEach(function(t) {
        t.call(this, n)
    })
}
;
DroidScriptApp.prototype.fireFileModified = function(n, t) {
    this.eventHandlers.fileModified.forEach(function(i) {
        i.call(this, n, t)
    })
}
;
uniqueTabIdCounter = 1;
DroidScriptAppFile.prototype.setModified = function(n) {
    this.modified = n
}
;
DroidScriptAppFile.prototype.getType = function() {
    var n = this.filename.split(".");
    return n[n.length - 1]
}
;
DroidScriptAppFile.prototype.close = function() {
    this.functions = [];
    this.session = null;
    this.modified = !1;
    this.errorMarkers = []
}
;
Client.prototype.setServerInfo = function(n) {
    this.config.setIPAddress(n);
    this.ternService && this.ternService.init(this.editor, this.appService, this.createTypeLoader())
}
;
Client.prototype.createTypeLoader = function() {
    throw "createTypeLoader must be implemented in a derived class";
}
;
Client.prototype.onKeydown = function() {}
;
Client.prototype.createIFrame = function() {
    throw "createIFrame must be implemented in a derived class";
}
;
Client.prototype.discardAppChanges = function() {}
;
Client.prototype.setConfig = function(n) {
    this.config = n;
    this.editor && (this.editor.setFontSize(this.config.getFontSize()),
    this.editor.setBehavioursEnabled(this.config.getUseBehaviours()));
    this.sampleEditor && this.sampleEditor.setFontSize(this.config.getFontSize());
    this.appService && this.appService.getOpenApp() && this.appService.getOpenApp().activeEditorFile && applyConfigForSession(this.appService.getOpenApp().activeEditorFile.session)
}
;
Client.prototype.applyConfigForSession = function(n) {
    n.$modeId == "ace/mode/javascript" && n.$worker && n.$worker.call("changeOptions", [{
        predef: ["app"]
    }])
}
;
Client.prototype.addEventListeners = function() {}
;
ClientWeb.prototype = new Client;
ClientWeb.prototype.constructor = ClientWeb;
ClientWeb.prototype.createTypeLoader = function() {
    return new TypeLoader
}
;
ClientWeb.prototype.createIFrame = function(n, t) {
    return $("<iframe id='" + n + "' src='" + t + "' frameborder='0'><\/iframe>")
}
;
assets_chooseFileFolder = "/Misc";
_localStorageId = "_ideConfig";
IDEConfig.prototype.getIPAddress = function() {
    return this.config.ipAddress
}
;
IDEConfig.prototype.setIPAddress = function(n) {
    this.config.ipAddress = n;
    this.save()
}
;
IDEConfig.prototype.getZoom = function() {
    return this.config.zoom
}
;
IDEConfig.prototype.setZoom = function(n) {
    this.config.zoom = n;
    this.save()
}
;
IDEConfig.prototype.getFontSize = function() {
    return this.config.editor.fontSize
}
;
IDEConfig.prototype.setFontSize = function(n) {
    this.config.editor.fontSize = n;
    this.save()
}
;
IDEConfig.prototype.getUseBehaviours = function() {
    return this.config.useBehaviours
}
;
IDEConfig.prototype.setUseBehaviours = function(n) {
    this.config.editor.useBehaviours = n;
    this.save()
}
;
IDEConfig.prototype.getUseWorker = function() {
    return this.config.useWorker
}
;
IDEConfig.prototype.setUseWorker = function(n) {
    this.config.editor.useWorker = n;
    this.save()
}
;
IDEConfig.prototype.load = function() {
    throw "load should be implemented in a derived class";
}
;
IDEConfig.prototype.save = function() {
    throw "save should be implemented in a derived class";
}
;
IDEConfigWeb.prototype = new IDEConfig;
IDEConfigWeb.prototype.constructor = IDEConfigWeb;
IDEConfigWeb.prototype.load = function() {
    var n = this;
    return new Promise(function(t) {
        if (localStorage && localStorage.getItem(_localStorageId)) {
            try {
                var i = JSON.parse(localStorage.getItem(_localStorageId));
                n.config = $.extend(!0, {}, n.config, i)
            } catch (r) {
                console.log("IDEConfigWeb.load error: " + r)
            }
            t()
        } else
            console.log("IDEConfigWeb not loaded"),
            t()
    }
    )
}
;
IDEConfigWeb.prototype.save = function() {
    if (localStorage)
        try {
            var n = JSON.stringify(this.config);
            localStorage.setItem(_localStorageId, n)
        } catch (t) {
            console.log("IDEConfigWeb.save error: " + t)
        }
}
;
Debug = {
    set enabled(n) {
        this.Log = n ? function() {
            return console.log.apply(console, arguments)
        }
        : function() {}
    },
    Log: function() {}
};
Log.prototype._showItem = function(n) {
    var i = $(n), t = $("#debugFilter").val().trim(), r;
    t.length > 0 && (t = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"),
    r = new RegExp(t,"i"),
    r.test(i.text()) || i.hide());
    this.list.append(i);
    this.scrollToBottom()
}
;
Log.prototype.message = function(n) {
    this._showItem("<li class='debug-message'><div class='debug-no-icon'>" + n + "<\/div><\/li>")
}
;
Log.prototype.error = function(n) {
    var i = n, t, r;
    n.indexOf("Script Error:") > -1 && (t = n.split("|"),
    t.length == 3 && (i = t[0].replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;"),
    r = t[2].replace(/^.*[\\\/]/, ""),
    r.indexOf("~") != 0 && (i += ", Line " + t[1],
    i += ", " + r)));
    this._showItem("<li class='debug-error'><div class='debug-error-icon'>" + i + "<\/div><\/li>")
}
;
Log.prototype.warning = function(n) {
    this._showItem("<li class='debug-warning'><div class='debug-warning-icon'>" + n + "<\/div><\/li>")
}
;
Log.prototype.service = function(n) {
    var t = n.replace("svc:", "");
    this._showItem("<li class='debug-service'><div class='debug-no-icon'>" + t + "<\/div><\/li>")
}
;
Log.prototype.clear = function() {
    this.list.empty()
}
;
Log.prototype.scrollToBottom = function() {
    var n = this.list.outerHeight(!0);
    this.list.parent().scrollTop(n)
}
;
var Resources = {
    APP_ICON: "resources/droidscript_app.png",
    ASSET_IMG: "resources/image.png",
    ASSET_SND: "resources/sound.png",
    ASSET_HTML: "resources/html.png",
    ASSET_MISC: "resources/file.png",
    COLLAPSE: "resources/collapse.png",
    EXPAND: "resources/expand.png"
}
  , NetUtils = {
    getUrl: function(n, t) {
        return n + "://" + serverIPAddress + ":" + t
    },
    getServerUrl: function(n) {
        return NetUtils.getUrl("http", 8088) + "/" + n
    },
    getServerWSUrl: function(n) {
        return NetUtils.getUrl("ws", 8088) + "/" + n
    },
    ajaxGet: function(n) {
        return new Promise(function(t, i) {
            simulate ? sim_ajaxGet(simulate, n, t, i) : connect(serverIPAddress).then(function() {
                n.cache = !1;
                var r = $.ajax(n);
                r.done(function(n) {
                    t(n)
                });
                r.fail(function(n, t, r) {
                    i(r)
                })
            }, i)
        }
        )
    },
    ajaxGetNoConnect: function(n) {
        return new Promise(function(t, i) {
            if (simulate)
                sim_ajaxGet(simulate, n, t, i);
            else {
                n.cache = !1;
                var r = $.ajax(n);
                r.done(function(n) {
                    t(n)
                });
                r.fail(function() {
                    i()
                })
            }
        }
        )
    }
}
  , ds_excludedTypes = ["OnCreate"]
  , ds_excludedProperties = {
    SObj: ["Destroy", "Release"],
    Obj: ["Destroy", "Release"],
    App: ["Try", "_Extract"],
    Zip: ["CreateKey", "CreateDebugKey", "Sign", "UpdateManifest"],
    Img: ["_auto", "_gfb"]
}
  , tern_commands = {
    ternShowType: {
        name: "ternShowType",
        exec: function(n) {
            n.ternServer.showType(n)
        },
        bindKey: "Ctrl-I"
    }
};
var Range = require("ace/range").Range, Document = require("ace/document").Document, editor = null, sampleEditor = null, EditSession = require("ace/edit_session").EditSession, UndoManager = require("ace/undomanager").UndoManager, webSocket, serverIPAddress = "", currentSample = "", simulate = null, serverInfo = null, serverPass = "", Logger = null, agent = navigator.userAgent;
if (console.log("agent = " + agent),
client = null,
Debug.enabled = !1,
docsEnabled = !0,
ternEnabled = !0,
agent.indexOf("Android") > -1) {
    SetClipboardText = function(n) {
        prompt("#", "App.SetClipboardText(" + n)
    }
    ;
    GetClipboardText = function() {
        return prompt("#", "App.GetClipboardText(")
    }
    ;
    ChooseFile = function(n, t, i) {
        prompt("#", "App.ChooseFile(\f" + n + "\f" + t + "\f" + (i ? i.name : null))
    }
    ;
    CopyFile = function(n, t) {
        prompt("#", "App.CopyFile(" + n + "\f" + t)
    }
    ;
    UploadFile = function(n, t, i, r) {
        prompt("#", "App.UploadFile(\f" + n + "\f" + t + "\f" + i + "\f" + (r ? r.name : null))
    }
    ;
    MakeFolder = function(n) {
        prompt("#", "App.MakeFolder(" + n)
    }
    ;
    function _Run(n) {
        eval(n)
    }
}
document.addEventListener("DOMContentLoaded", function() {
    document.body.addEventListener("resize", onEditorResize);
    document.querySelector("#newBtn").addEventListener("click", function() {
        $("#newFileError").hide();
        $("#newFileDialog").modal("show")
    });
    document.querySelector("#saveBtn").addEventListener("click", onSave);
    document.querySelector("#runBtn").addEventListener("click", onRun);
    document.querySelector("#stopBtn").addEventListener("click", onStop);
    document.querySelector("#copyBtn").addEventListener("click", onCopy);
    document.querySelector("#pasteBtn").addEventListener("click", onPaste);
    document.querySelector("#collapseAllBtn").addEventListener("click", onCollapseAll);
    document.querySelector("#expandAllBtn").addEventListener("click", onExpandAll);
    document.querySelector("#expBtn").addEventListener("click", onExpand);
    document.querySelector("#reloadHomeBtn").addEventListener("click", function() {
        $("#homeView").attr("src", $("#homeView").attr("src"))
    });
    document.querySelector("#sampleBackBtn").addEventListener("click", function() {
        $("#sampleCodeView").hide();
        $("#sampleContentView").show()
    });
    document.querySelector("#sampleRunBtn").addEventListener("click", runSample);
    document.querySelector("#sampleStopBtn").addEventListener("click", onStop);
    document.querySelector("#sampleCopyBtn").addEventListener("click", onCopySample);
    document.querySelector("#sampleFilterClearBtn").addEventListener("click", function() {
        $("#sampleFilter").val("")
    });
    document.querySelector("#debugClearBtn").addEventListener("click", function() {
        Logger.clear()
    });
    document.querySelector("#connectButton").addEventListener("click", onConnect);
    document.querySelector("#newFileDialogButton").addEventListener("click", function() {
        newFile($("#fileName").val(), $("#fileTypeChoice").html())
    });
    document.querySelector("#sampleFilter").addEventListener("change", onSampleFilter);
    document.querySelector("#sampleFilter").addEventListener("keypress", onSampleFilter);
    document.querySelector("#sampleFilter").addEventListener("paste", onSampleFilter);
    document.querySelector("#sampleFilter").addEventListener("input", onSampleFilter);
    document.querySelector("#sampleFilterClearBtn").addEventListener("click", function() {
        $("#sampleFilter").val("");
        onSampleFilter()
    });
    $("#sampleFilterForm").submit(function() {
        return !1
    });
    document.querySelector("#debugFilter").addEventListener("change", onDebugFilter);
    document.querySelector("#debugFilter").addEventListener("keypress", onDebugFilter);
    document.querySelector("#debugFilter").addEventListener("paste", onDebugFilter);
    document.querySelector("#debugFilter").addEventListener("input", onDebugFilter);
    document.querySelector("#debugFilterClearBtn").addEventListener("click", function() {
        $("#debugFilter").val("");
        onDebugFilter()
    });
    $("#debugFilterForm").submit(function() {
        return !1
    });
    $(".modal-with-form").on("shown", function() {
        $(this).find(".focus-input").focus()
    });
    $(".modal-form").submit(function(n) {
        n.preventDefault()
    })
});
$(document).ready(function() {
    var n, t;
    console.log("ready");
    n = $("#rightPanelTabs").outerHeight(!0);
    $(".homeWrapper").css("top", n);
    $(".samplesWrapper").css("top", n);
    $(".docsWrapper").css("top", n);
    $(".debugWrapper").css("top", n);
    onEditorResize();
    updateTooltips();
    createBusySpinner();
    Logger = new Log($("#debugList"),$("#debugFilter"));
    t = null;
    console.log("getAppType = " + getAppType());
    getAppType() === "Chrome" ? (t = new IDEConfigChrome,
    console.log("navigator.appVersion" + navigator.appVersion),
    navigator.appVersion.indexOf("CrOS") != -1 && ($("#topNavBar").hide(),
    $("#pageContentWrapper").css("top", 0))) : t = new IDEConfigWeb;
    t.load().then(function() {
        if (client = createClient(t),
        location.protocol == "http:")
            if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(location.hostname)) {
                function n(t) {
                    if (t == 5) {
                        onRequestError();
                        return
                    }
                    connect(location.hostname).then(function(n) {
                        connected(n)
                    }, function(i) {
                        i == "PasswordError" ? ($("#passwordDialogError").show(),
                        n(++t)) : onRequestError()
                    })
                }
                $("#passwordDialogCancelButton").hide();
                n(0)
            } else
                $("#serverIPAddress").val(client.config.getIPAddress()),
                $("#connectDialog").modal("show");
        else
            location.protocol == "file:" ? location.href.toLowerCase().indexOf("smartscript") < 0 ? ($("#serverIPAddress").val(client.config.getIPAddress()),
            $("#connectDialog").modal("show")) : (simulate = "SmartScript",
            connect("file")) : location.protocol == "chrome-extension:" ? ($("#serverIPAddress").val(client.config.getIPAddress()),
            $("#connectDialog").modal("show")) : Debug.Log("Unable to determine where IDE is running from: " + document.URL);
        loadHomePage();
        $("#newAppDialog").on("hidden", function() {
            $("#newAppError").hide()
        });
        $("#renameDialog").on("hidden", function() {
            $("#renameError").hide()
        })
    })
});
document.addEventListener("keydown", function(n) {
    var t = navigator.platform.match("Mac") ? n.metaKey : n.ctrlKey;
    if (n.keyCode == 83 && t)
        n.preventDefault(),
        onSave();
    else if (n.keyCode == 78 && t)
        n.preventDefault(),
        onSave();
    else if (n.keyCode == 82 && n.altKey)
        n.preventDefault(),
        onRun();
    else if (n.keyCode == 83 && n.altKey)
        n.preventDefault(),
        onStop();
    else if (n.keyCode == 116 || n.keyCode == 82 && t)
        $("#appsTab").is(":visible") && (n.preventDefault(),
        refreshAppsList());
    else
        client.onKeydown(n)
}, !1);
window.onbeforeunload = function() {
    return "Any unsaved changes will be lost."
}
;
$(document).on("click", "#server", function() {
    var n = $(this).data("ipAddress");
    $("#serverIPAddress").val(n)
});
$(".immediate-form").on("submit", function() {
    var n = $("#immediate-code").val();
    return n.trim() != "" && NetUtils.ajaxGet({
        url: NetUtils.getServerUrl("ide?cmd=exec&code=" + encodeURIComponent(n))
    }),
    !1
});
webSocketKeepAliveTimer = null;
$(document).on("click", "#sampleButton", function() {
    var t = $(this).closest("div"), n = t.data("title"), u = t.data("type"), i, r;
    if (n.indexOf("&#9830;") > -1) {
        $("#messageDialogHeader").text("Premium Feature");
        $("#messageDialogMessage").text("Please subscribe to 'DroidScript Premium' to access this sample");
        $("#messageDialog").modal("show");
        return
    }
    currentSample = n;
    i = u == "h" ? ".html" : ".js";
    r = n.split(" ").join("_") + i;
    NetUtils.ajaxGet({
        url: NetUtils.getServerUrl("ide?cmd=get&file=/assets/samples/" + r)
    }).then(function(n) {
        var t = n.replace(/\\\'/g, ""), i;
        t = JSON.parse(t).file;
        client.sampleEditor.setValue(t);
        client.sampleEditor.moveCursorTo(0, 0);
        $("#sampleCodeView").show();
        i = $("#sampleToolBar").outerHeight(!0);
        $("#sampleEditor").css("top", i);
        $("#sampleContentView").hide()
    })
});
$(document).on("click", "#newApp .thumbnail", function() {
    newApp("js")
});
$(document).on("click", "#newHtmlApp .thumbnail", function() {
    newApp("html")
});
$(document).on("click", "#openAppButton", function() {
    var i = $(this).closest("li"), t = i.data("appName"), n;
    if (t) {
        if (n = client.appService.getApp(t),
        client.appService.getOpenApp() == n) {
            $('#leftPanelTabs a[href="#editorTab"]').tab("show");
            return
        }
        client.appService.getOpenApp() != null && client.appService.getOpenApp().isModified() ? ($("#yesNoCancelDialogHeader").text("Unsaved Changes"),
        $("#yesNoCancelDialogMessage").text("There are unsaved changes, do you want to save changes before continuing?"),
        $("#yesNoCancelDialogYesButton").off("click").click(function() {
            saveAll().then(function() {
                openApp(n)
            })
        }),
        $("#yesNoCancelDialogNoButton").off("click").click(function() {
            client.discardAppChanges(client.appService.getOpenApp());
            openApp(n)
        }),
        $("#yesNoCancelDialog").modal("show")) : openApp(n)
    }
});
$(document).on("click", "#renameAppButton", function() {
    var n = $(this).closest("li"), t = n.data("appName"), i;
    t && ($("#renameDialogName").val(t),
    i = function() {
        var u, r, i, f;
        if ($("#renameDialogName").val() != "") {
            if (u = t,
            r = $("#renameDialogName").val(),
            containsReservedCharacters(r)) {
                $("#renameError").fadeIn();
                return
            }
            if ($("#renameDialog").modal("hide"),
            r == u)
                return;
            typeof client.appService.getApp(r) != "undefined" ? ($("#messageDialogHeader").text("Cannot Rename App"),
            $("#messageDialogMessage").text("An App with the name '" + r + "' already exists."),
            $("#messageDialog").modal("show")) : (i = client.appService.getApp(t),
            f = client.appService.getOpenApp() == i,
            i.rename(r).then(function() {
                client.appService.removeApp(u);
                client.appService.addApp(i);
                n.data("appName", r);
                f && ($('#editorTabs a[href="' + i.mainEditorFile.tabId + '"]').text(i.mainEditorFile.filename),
                client.appService.setOpenApp(i));
                n.find("p.appFilename").text(i.getName());
                client.extImageLoader.load(NetUtils.getServerUrl(i.getIconPath()), n.find("img.app-image"), Resources.APP_ICON);
                sortAppList()
            }, function() {
                $("#errorDialog").modal("hide")
            }))
        } else
            $("#renameDialog").modal("hide")
    }
    ,
    $("#renameDialogButton").off("click").click(i),
    $("#renameDialog").modal("show"))
});
$(document).on("click", "#deleteAppButton", function() {
    var i = $(this).closest("li"), n = i.data("appName"), t;
    n && (t = client.appService.getApp(n),
    client.appService.getOpenApp() == t ? ($("#messageDialogHeader").text("Cannot Delete App"),
    $("#messageDialogMessage").text("'" + n + "' is currently open for edit and cannot be deleted."),
    $("#messageDialog").modal("show")) : ($("#okCancelDialogOkButton").off("click").click(function() {
        t.delete().then(function() {
            i.remove()
        })
    }),
    $("#okCancelDialogHeader").text("Delete App"),
    $("#okCancelDialogMessage").text("Are you sure you want to delete the App '" + n + "' and all its assets?"),
    $("#okCancelDialog").modal("show")))
});
$(document).on("click", ".deleteFileBtn", function() {
    var r = $(this).closest("li"), n = r.data("editorFile"), t, i;
    typeof n != "undefined" && (t = client.appService.getOpenApp(),
    i = function() {
        NetUtils.ajaxGet({
            url: NetUtils.getServerUrl("ide?cmd=delete&file=" + encodeURIComponent(t.folder + "/" + n.filename))
        }).then(function() {
            var i = t.indexOf(n);
            t.removeEditorFile(n);
            $('#editorTabs a[href="' + n.tabId + '"]').parent().remove();
            $("#editorTabs").data("tabdrop").layout();
            t.activeEditorFile === n && (i >= t.getEditorFileCount() && --i,
            $('#editorTabs a[href="' + t.getEditorFile(i).tabId + '"]').tab("show"))
        })
    }
    ,
    $("#okCancelDialogHeader").text("Delete File"),
    $("#okCancelDialogMessage").text("Delete '" + n.filename + "', are you sure?"),
    $("#okCancelDialogOkButton").off("click").click(i),
    $("#okCancelDialog").modal("show"))
});
$("#fileTypeOptions li a").click(function() {
    var n = $(this).text();
    $("#fileTypeChoice").html(n)
})